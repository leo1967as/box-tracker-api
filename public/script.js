// ===================== INITIALIZE GLOBAL VARIABLES =====================
// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
let map; // ‡πÄ‡∏Å‡πá‡∏ö object ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Google Maps
let userLocation = null; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
let userMarker = null; // ‡πÄ‡∏Å‡πá‡∏ö marker ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
let clickMarker = null; // ‡πÄ‡∏Å‡πá‡∏ö marker ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
let routeLine = null; // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î
let routeSelected = null; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
let liveTimerInterval = null; // ‡πÄ‡∏Å‡πá‡∏ö interval ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
let currentDeliveryId = null; // ‡πÄ‡∏Å‡πá‡∏ö ID ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô Firebase
let startTime = null; // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
let itemName = ''; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏Ç‡∏≠‡∏á
let receiverName = ''; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
let trackingInterval = null;
let currentBox = null;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô localStorage
let startPointOptions = JSON.parse(localStorage.getItem("startPoints")) || []; // ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
let endPointOptions = JSON.parse(localStorage.getItem("endPoints")) || []; // ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
let savedRoutes = JSON.parse(localStorage.getItem("savedRoutes")) || []; // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ

// ===================== FIREBASE CONFIGURATION =====================
// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
const firebaseConfig = {
  apiKey: "AIzaSyDj4aYtdPAI3-uWGKUUcScYaTn66vhuTHt4",
  authDomain: "tissueboxdb.firebaseapp.com",
  projectId: "tissueboxdb",
  storageBucket: "tissueboxdb.appspot.com",
  messagingSenderId: "578294379663",
  appId: "1:578294379663:web:592d86722575dcc1676cfa",
  measurementId: "G-CE000PRNNC"
};

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore(); // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏ñ‡∏∂‡∏á Firestore database

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
db.collection("test").add({ test: "connection", savedAt: new Date() })
  .then(() => console.log("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!"))
  .catch(err => console.error("‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err));


// ===================== GOOGLE MAPS FUNCTIONS =====================
/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Google Maps
 * - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û
 * - ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï)
 * - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
 */

const hospitalStartPoint = {
  name: "‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏´‡∏•‡∏±‡∏Å",
  lat: 17.3473,   // üîÅ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏¢‡πâ‡∏≤‡∏¢‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
  lng: 103.7685,
};

function initMap() {
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û
  const defaultCenter = { lat: 13.736717, lng: 100.523186 };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô element ‡∏ó‡∏µ‡πà‡∏°‡∏µ id="map"
  map = new google.maps.Map(document.getElementById("map"), {
    center: defaultCenter,
    zoom: 14,
  });

  new google.maps.Marker({
    map,
    position: { lat: hospitalStartPoint.lat, lng: hospitalStartPoint.lng },
    label: "üè•",
    title: hospitalStartPoint.name
  });
  populatePointList(); // ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏° datalist ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        userLocation = {
          lat: position.coords.latitude,
          lng: position.coords.longitude,
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        userMarker = new google.maps.Marker({
          position: userLocation,
          map: map,
          label: "üìç",
          title: "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        });

        // ‡∏¢‡πâ‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        map.setCenter(userLocation);
      },
      () => alert("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ")
    );
  } else {
    alert("‚ö†Ô∏è ‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
  }

  // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
  map.addListener("click", (event) => {
    const clickedLatLng = event.latLng;
  
    // ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
    document.getElementById("latInput").value = clickedLatLng.lat().toFixed(6);
    document.getElementById("lngInput").value = clickedLatLng.lng().toFixed(6);
  
    // ‡∏•‡∏ö marker ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (clickMarker) clickMarker.setMap(null);
  
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å
    clickMarker = new google.maps.Marker({
      position: clickedLatLng,
      map: map,
      label: "üéØ",
      title: "‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
    });
  
    // ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (routeLine) routeLine.setMap(null);
  
    // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏´‡∏•‡∏±‡∏Å ‚Üí ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å
    routeLine = new google.maps.Polyline({
      path: [
        { lat: hospitalStartPoint.lat, lng: hospitalStartPoint.lng },
        clickedLatLng
      ],
      geodesic: true,
      strokeColor: "#2196f3",
      strokeOpacity: 1.0,
      strokeWeight: 4,
    });
    routeLine.setMap(map);
  
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    document.getElementById("distance-output").innerText =
      `üìç ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å ${hospitalStartPoint.name} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å`;
  });
  

  map.addListener("dblclick", async (e) => {
    const lat = e.latLng.lat();
    const lng = e.latLng.lng();
    const name = prompt("üìù ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô dropdown):");
    if (!name) return;
  
    try {
      await db.collection("locations").add({
        name,
        lat,
        lng,
        createdAt: new Date()
      });
  
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á knownPoints ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î dropdown
      knownPoints.push({ name, lat, lng });
      populatePointList();
      populateSelectOptions();
  
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° marker ‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
      new google.maps.Marker({
        position: { lat, lng },
        map,
        label: "üÜï",
        title: name,
      });
  
      alert("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!");
    } catch (error) {
      console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏∏‡∏î:", error);
      alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
    }
  });
}

// ===================== ADD DATALSIT ====================

let knownPoints = [];

async function loadKnownPointsFromFirebase() {
  try {
    const snapshot = await db.collection("locations").orderBy("name").get();
    knownPoints = snapshot.docs.map(doc => doc.data());

    populatePointList();
    populateSelectOptions();
  } catch (error) {
    console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏∏‡∏î‡∏à‡∏≤‡∏Å Firebase ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
  }
}





function populatePointList() {
  const list = document.getElementById("pointList");
  list.innerHTML = "";
  knownPoints.forEach(p => {
    const option = document.createElement("option");
    option.value = p.name;
    list.appendChild(option);
  });
}

let startMarker = null;
let endMarker = null;

["startPointSelect", "endPointSelect"].forEach((id) => {
  document.getElementById(id).addEventListener("change", (e) => {
    const type = id.includes("start") ? "start" : "end";
    const point = knownPoints.find(p => p.name === e.target.value);

    if (type === "start" && startMarker) startMarker.setMap(null);
    if (type === "end" && endMarker) endMarker.setMap(null);

    if (!point) return;

    const latLng = { lat: point.lat, lng: point.lng };

    const marker = new google.maps.Marker({
      map,
      position: latLng,
      label: type === "start" ? "Start" : "Goal",
      title: type === "start" ? "‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô" : "‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á"
    });

    if (type === "start") startMarker = marker;
    else endMarker = marker;

    map.setCenter(latLng);
    map.setZoom(15);
  });
});

// ===================== ROUTE MANAGEMENT =====================
/**
 * ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÉ‡∏ô dropdown ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
function populateSelectOptions() {
  const elements = {
    startSelect: document.getElementById("startPointSelect"),
    endSelect: document.getElementById("endPointSelect"),
    trackerStart: document.getElementById("trackerStartSelect"),
    trackerEnd: document.getElementById("trackerEndSelect")
  };
  const pointNames = knownPoints.map(p => p.name);
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏¥‡∏° options
  const fillOptions = (selectElem, data) => {
    selectElem.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á options ‡πÄ‡∏î‡∏¥‡∏°
    data.forEach(pt => {
      const opt = document.createElement("option");
      opt.value = opt.text = pt;
      selectElem.appendChild(opt);
    });
  };

  // ‡πÄ‡∏ï‡∏¥‡∏° options ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ select element
  fillOptions(elements.startSelect, startPointOptions);
  fillOptions(elements.endSelect, endPointOptions);
  fillOptions(elements.trackerStart, startPointOptions);
  fillOptions(elements.trackerEnd, endPointOptions);
}


function saveRouteData() {
  const start = document.getElementById("startPointSelect").value;
  const end = document.getElementById("endPointSelect").value;
  const duration = Number(document.getElementById("customDuration").value);

  if (!start || !end || !duration) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏° ‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ");
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const existingIndex = savedRoutes.findIndex(
    (route) => route.start === start && route.end === end
  );

  if (existingIndex !== -1) {
    const existingRoute = savedRoutes[existingIndex];
    if (duration >= existingRoute.duration) {
      alert(`‚ùå ‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß (${existingRoute.duration} ‡∏ô‡∏≤‡∏ó‡∏µ)`);
      return;
    }
    savedRoutes.splice(existingIndex, 1);
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  const newRoute = {
    start,
    end,
    duration,
    savedAt: new Date().toLocaleString(),
  };

  savedRoutes.push(newRoute);
  localStorage.setItem("savedRoutes", JSON.stringify(savedRoutes));
  displaySavedRoutes();
  alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
}

function displaySavedRoutes() {
  const output = document.getElementById("savedRoutesOutput");
  if (!output) return;

  output.innerHTML = `<h3>üìí ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ</h3>`;

  savedRoutes.forEach((route, index) => {
    output.innerHTML += `
      <div style="margin-bottom: 0.8em;">
        üß≠ <b>${route.start}</b> ‚Üí <b>${route.end}</b> ‚è±Ô∏è ${route.duration} ‡∏ô‡∏≤‡∏ó‡∏µ<br/>
        üóìÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${route.savedAt}<br/>
        <button onclick="editRoute(${index})">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
        <button onclick="deleteRoute(${index})">üóëÔ∏è ‡∏•‡∏ö</button>
      </div>
    `;
  });
}

function deleteRoute(index) {
  if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ?")) {
    savedRoutes.splice(index, 1);
    localStorage.setItem("savedRoutes", JSON.stringify(savedRoutes));
    displaySavedRoutes();
  }
}

function editRoute(index) {
  const route = savedRoutes[index];
  const newDuration = prompt(`‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${route.start} ‚Üí ${route.end} (‡∏ô‡∏≤‡∏ó‡∏µ):`, route.duration);

  if (newDuration === null) return;
  const durationNumber = Number(newDuration);

  if (isNaN(durationNumber) || durationNumber <= 0) {
    alert("‚õî ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!");
    return;
  }

  savedRoutes[index].duration = durationNumber;
  savedRoutes[index].savedAt = new Date().toLocaleString();
  localStorage.setItem("savedRoutes", JSON.stringify(savedRoutes));
  displaySavedRoutes();
}

// ===================== DELIVERY TRACKING =====================
/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
 * @param {string} start - ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
 * @param {string} end - ‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
 * @returns {number|null} ‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
 */
function getStandardDuration(start, end) {
  const matched = savedRoutes.find(route => 
    route.start === start && route.end === end
  );
  return matched ? matched.duration : null;
}

function updateStandardDurationLabel() {
  const start = document.getElementById("trackerStartSelect").value;
  const end = document.getElementById("trackerEndSelect").value;
  const duration = getStandardDuration(start, end);

  const label = document.getElementById("standardDurationOutput");
  label.innerText = duration != null 
    ? `‚åõ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: ${duration} ‡∏ô‡∏≤‡∏ó‡∏µ`
    : `‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ`;
}

function updateLiveTimer() {
  if (!startTime) return;

  const now = new Date();
  const durationMs = now - startTime;
  const durationMin = Math.floor(durationMs / 60000);
  const durationSec = Math.floor((durationMs % 60000) / 1000);

  const liveTimerSpan = document.getElementById("liveTimer");
  if (liveTimerSpan) {
    liveTimerSpan.innerText = `üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ: ${durationMin} ‡∏ô‡∏≤‡∏ó‡∏µ ${durationSec} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
  }
}

// ================== Firebase Delivery Logging ==================
async function logStartDelivery() {
  try {
    const docRef = await db.collection("deliveries").add({
      itemName: itemName,
      receiverName: receiverName,
      start: routeSelected.start,
      end: routeSelected.end,
      standardDuration: routeSelected.standardDuration,
      startTime: new Date(),
      status: "‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß",
      createdAt: new Date()
    });
    console.log("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ID:", docRef.id);
    return docRef.id;
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", error);
    return null;
  }
}

async function logDeliveryCompletion(deliveryId) {
  if (!deliveryId) return;

  const stopTime = new Date();
  const durationMs = stopTime - startTime;
  const durationMin = Math.floor(durationMs / 60000);
  
  let performance = "";
  const standard = routeSelected.standardDuration;

  if (standard != null) {
    const diff = durationMin - standard;
    performance = diff < 0 ? `‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ${Math.abs(diff)} ‡∏ô‡∏≤‡∏ó‡∏µ` :
                diff > 0 ? `‡∏°‡∏≤‡∏ä‡πâ‡∏≤‡πÑ‡∏õ ${diff} ‡∏ô‡∏≤‡∏ó‡∏µ` : "‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πä‡∏∞‡πÄ‡∏•‡∏¢";
  } else {
    performance = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ";
  }

  try {
    await db.collection("deliveries").doc(deliveryId).update({
      stopTime: stopTime,
      actualDuration: durationMin,
      performance: performance,
      status: "‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß",
      updatedAt: new Date()
    });
    console.log("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:", error);
  }
}

async function handleSendBox() {
  itemName = document.getElementById("itemName").value.trim();
  receiverName = document.getElementById("receiverName").value.trim();
  const selectedStart = document.getElementById("trackerStartSelect").value;
  const selectedEnd = document.getElementById("trackerEndSelect").value;

  if (!itemName || !receiverName || !selectedStart || !selectedEnd) {
    alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡πà‡∏∞!");
    return;
  }

  routeSelected = {
    start: selectedStart,
    end: selectedEnd,
    standardDuration: getStandardDuration(selectedStart, selectedEnd)
  };

  startTime = new Date();
  
  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô localStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
  localStorage.setItem("currentDelivery", JSON.stringify({
    itemName,
    receiverName,
    start: selectedStart,
    end: selectedEnd,
    startTime: startTime.toISOString(),
    standardDuration: routeSelected.standardDuration
  }));

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏•‡∏á Firebase
  currentDeliveryId = await logStartDelivery();

  document.getElementById("logArea").innerHTML =
    `üì¶ ‡∏Å‡∏•‡πà‡∏≠‡∏á "${itemName}" ‡∏à‡∏≤‡∏Å "${routeSelected.start}" ‡πÑ‡∏õ‡∏¢‡∏±‡∏á "${routeSelected.end}" ` +
    `‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á "${receiverName}" ‡πÄ‡∏ß‡∏•‡∏≤: ${startTime.toLocaleTimeString()}<br/>
    <span id="liveTimer">üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ: 0 ‡∏ô‡∏≤‡∏ó‡∏µ 0 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>`;

  document.getElementById("startBtn").disabled = true;
  document.getElementById("stopBtn").disabled = false;

  liveTimerInterval = setInterval(updateLiveTimer, 1000);
}

async function handleReceiveBox() {
  if (!startTime || !routeSelected) return;

  clearInterval(liveTimerInterval);
  liveTimerInterval = null;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firebase
  await logDeliveryCompletion(currentDeliveryId);

  const stopTime = new Date();
  const durationMs = stopTime - startTime;
  const durationMin = Math.floor(durationMs / 60000);
  const durationSec = Math.floor((durationMs % 60000) / 1000);

  let performance = "";
  const standard = routeSelected.standardDuration;

  if (standard != null) {
    const diff = durationMin - standard;
    performance = diff < 0 ? `üü¢ ‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ ${Math.abs(diff)} ‡∏ô‡∏≤‡∏ó‡∏µ` :
                diff > 0 ? `üî¥ ‡∏°‡∏≤‡∏ä‡πâ‡∏≤‡πÑ‡∏õ ${diff} ‡∏ô‡∏≤‡∏ó‡∏µ` : "‚úÖ ‡∏°‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πä‡∏∞‡πÄ‡∏•‡∏¢!";
  } else {
    performance = "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ";
  }

  document.getElementById("logArea").innerText +=
    `\nüì¨ ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤: ${stopTime.toLocaleTimeString()}
üïí ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á: ${durationMin} ‡∏ô‡∏≤‡∏ó‡∏µ ${durationSec} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: ${performance}`;

  document.getElementById("stopBtn").disabled = true;
  localStorage.removeItem("currentDelivery");

  const liveTimerSpan = document.getElementById("liveTimer");
  if (liveTimerSpan) liveTimerSpan.remove();
}

// ================== Firebase Route Management ==================
async function saveAllRoutesToFirestore() {
  if (savedRoutes.length === 0) {
    alert("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
    return;
  }

  try {
    for (const route of savedRoutes) {
      await db.collection("routes").add({
        start: route.start,
        end: route.end,
        duration: route.duration,
        savedAt: new Date()
      });
    }
    document.getElementById("firebaseSaveStatus").innerText = "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!";
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:", error);
    document.getElementById("firebaseSaveStatus").innerText = "‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
  }
}

async function loadRoutesFromFirebase() {
  const outputDiv = document.getElementById("routesList");
  outputDiv.innerHTML = "üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...";

  try {
    const snapshot = await db.collection("routes").orderBy("savedAt", "desc").get();

    if (snapshot.empty) {
      outputDiv.innerHTML = "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firebase";
      return;
    }

    outputDiv.innerHTML = "";
    snapshot.forEach((doc) => {
      const route = doc.data();
      outputDiv.innerHTML += `
        <div style="margin-bottom: 1em; border-bottom: 1px dashed #ccc; padding-bottom: 0.5em;">
          üß≠ <b>${route.start}</b> ‚Üí <b>${route.end}</b><br/>
          ‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤: ${route.duration} ‡∏ô‡∏≤‡∏ó‡∏µ<br/>
          üóìÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date(route.savedAt).toLocaleString()}
        </div>
      `;
    });
  } catch (error) {
    outputDiv.innerHTML = "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: " + error.message;
    console.error("‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
  }
}


// API
const API_BASE_URL = "https://box-tracker-api-4.vercel.app";
let markers = [];
let polyline = null;

async function loadPath(boxNumberInput = null) {
  console.log("Calling API with URL:", `${API_BASE_URL}/api/get-path?boxNumber=${boxNumber}`);
  const boxNumber = boxNumberInput || document.getElementById("boxNumber").value.trim();
  if (!boxNumber) {
    console.warn("Box number ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }

  try {
    const res = await fetch(`${API_BASE_URL}/api/get-path?boxNumber=${boxNumber}`);
    
    if (!res.ok) {
      throw new Error(`API request failed with status ${res.status}`);
    }
    
    const data = await res.json();
    
    if (!data.path || data.path.length === 0) {
      console.log("‡πÑ‡∏°‡πà‡∏°‡∏µ path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ");
      return;
    }

    // ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
    markers.forEach((m) => m.setMap(null));
    markers = [];
    if (polyline) polyline.setMap(null);

    const pathCoords = data.path.map((p) => ({ lat: p.lat, lng: p.lng }));

    polyline = new google.maps.Polyline({
      path: pathCoords,
      geodesic: true,
      strokeColor: "#28a745",
      strokeOpacity: 1.0,
      strokeWeight: 3,
    });
    polyline.setMap(map);

    pathCoords.forEach((pos, i) => {
      const marker = new google.maps.Marker({
        position: pos,
        label: `${i + 1}`,
        map: map,
      });
      markers.push(marker);
    });

    map.panTo(pathCoords[pathCoords.length - 1]); // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  } catch (error) {
    console.error("Error loading path:", error);
    alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: " + error.message);
  }
}

function startAutoTracking() {
  const boxNumberInput = document.getElementById("boxNumber").value.trim();
  if (!boxNumberInput) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ boxNumber");
  
  // Clear any existing interval
  if (trackingInterval) {
    clearInterval(trackingInterval);
  }
  
  loadPath(boxNumberInput);
  trackingInterval = setInterval(() => loadPath(boxNumberInput), 2000);
}

function stopAutoTracking() {
  if (trackingInterval) {
    clearInterval(trackingInterval);
    trackingInterval = null;
  }
  
  // Clear the map
  markers.forEach(m => m.setMap(null));
  markers = [];
  if (polyline) polyline.setMap(null);
}
// ================== Initialize App ==================
document.addEventListener("DOMContentLoaded", () => {
  
  loadKnownPointsFromFirebase(); // ‚¨Ö ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Firestore  
  populateSelectOptions();
  displaySavedRoutes();
  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤)
  const saved = localStorage.getItem("currentDelivery");
  if (saved) {
    const data = JSON.parse(saved);
    itemName = data.itemName;
    receiverName = data.receiverName;
    routeSelected = {
      start: data.start,
      end: data.end,
      standardDuration: data.standardDuration
    };
    startTime = new Date(data.startTime);

    document.getElementById("logArea").innerHTML = 
      `üì¶ ‡∏Å‡∏•‡πà‡∏≠‡∏á "${itemName}" ‡∏à‡∏≤‡∏Å "${routeSelected.start}" ‡πÑ‡∏õ‡∏¢‡∏±‡∏á "${routeSelected.end}" ` +
      `‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á "${receiverName}" ‡πÄ‡∏ß‡∏•‡∏≤: ${startTime.toLocaleTimeString()}<br/>
      <span id="liveTimer">üïí ‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ: ...</span>`;

    document.getElementById("startBtn").disabled = true;
    document.getElementById("stopBtn").disabled = false;

    liveTimerInterval = setInterval(updateLiveTimer, 1000);
  }

  // Event Listeners
  document.getElementById("startBtn").addEventListener("click", handleSendBox);
  document.getElementById("stopBtn").addEventListener("click", handleReceiveBox);
  document.getElementById("saveRouteDataBtn").addEventListener("click", saveRouteData);
  document.getElementById("trackerStartSelect").addEventListener("change", updateStandardDurationLabel);
  document.getElementById("trackerEndSelect").addEventListener("change", updateStandardDurationLabel);
  document.getElementById("saveToFirebaseBtn").addEventListener("click", saveAllRoutesToFirestore);
});

